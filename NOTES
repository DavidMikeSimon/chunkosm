Chunks: 16^3
Tick rate: 10 per second
N chunks per district proc, not necessarily (but most likely) contiguous

Districts own their entities; when an entity moves into a different district, there is a handoff
between procs. (What happens if an entity moves so fast that it passes through three districts in a tick?)

Simulation implemented in terms of signals; signals travel at most 16 blocks in a tick, so that
a chunk can resolve after all of its neighbors have finished sending their signals. (Can this
deal with teleportation and other such long-range notions? Can this be solved by making those
signals wait two ticks?)

- Scale:
At minecraft walk speed, you can go 15km in an hour. Let's let that be the distance to travel
back to your starting location around the wrapping square map. With 16^3 chunks and 16 chunks
total from bedrock to sky, a 15x15km world gives us a total of 14 million chunks, which is pretty
reasonable storage-wise, especially considering that at least half of those chunks will just be
empty air, and the majority of the remainder will be dominated by one block type.

- Unloaded chunks:
Some signals will not propogate into unloaded chunks, or else can somehow affect global chunk state
(e.g. atmoshperic effects?) without having to load block data.  Other signals will cause chunks
to become loaded.

We may also need meta-chunks to store this kind of information, otherwise trying to propogate it
throughout all unloaded chunks could get extremely costly.

- Lighting:
Lighting is implemented as a vector+spread property on blocks, one per light source. When blocks
change, they emit a signal in the vector+spread directions to propogate recalculation of light
levels. Even sunlight should be able to work this way, if you consider the source to be any
block where the sunlight (going straight down) hits.

Questions:
  - Will this be too slow?
  - Can we stop pointless changes earlier on (e.g. a new block being created very high in mid-air,
    or sunlight being propogated to a block that's already lit by sunlight) by stopping signals
    when they don't alter any state as they travel through a block?

- Volumetric liquid flow

Must conserve total amount of water; while water is travelling between blocks, that quantity is
"contained" within the signal itself.

Suppose a block of water is removed, and is now a block of air. We want neighboring blocks to flow
into it. Impelement with check condition "gravity_water_difference" which triggers on air block or
non-full water block to the side of (or above) water block. Condition does not trigger on very small
differences; this can be used to diffuse a change instead of spreading an increasingly small wave across
an entire water body surface (which might be an ocean!)

1. Condition triggers. Handler checks the block above for water. If block above does not have enough water to fill
   target block, it also checks side blocks. It then sends a "negative_water_pressure" signal towards each of the
   valid blocks it could get water from, with the amount of water requested divided among them in proportion to their
   relative delta volumes. (P1)
2. Those blocks receive the "negative_water_pressure" signal, reduce their own water volume by up to requested amount,
   then emit a "water_flow" signal (containing that volume) in the direction that the negative_water_pressure signal
   came from. (P2)
   If more than one negative_water_pressure signal received at same time, divide flow
   among them.
3. Original block receives "water_flow" signals, increases its volume by that much. If its volume goes over 1, it emits
   the remainder in a "water_flow" signal upwards. (P3)
 
 
Questions:
1. What happens if I remove a bunch of water blocks over a short period of time and these signals start interacting? Does
   it do the right thing?
2. Is there a situation where this could end up with a steadily-growing pile of signals spreading out? Is there some
   general way to define, detect, or (best of all) provably prevent this situation?

- Pneumatic tubes
Signal propogation speed at less than maximum; some tubes might be slower than 160 blocks/sec.
When a signal is moving through a block slowly, we want to see the position of the item move
within the block space (e.g. from 0.2m to 0.7m if the block moves half a meter per tick).

- Plant growth
Infrequent tick events; don't want to have to re-run plant growth checks every tick.
